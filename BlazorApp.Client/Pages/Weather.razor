@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>
<div>
    <button class="btn btn-primary" @onclick="LoadDatas">Update</button>
</div>
@if (forecasts == null)
{
    @if(string.IsNullOrEmpty(errorMessage))
    {
        <p><em>Loading...</em></p>
    }    
    else
    {
        <p>@errorMessage</p>
        
    }

}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string errorMessage = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadDatas();

    }
    private async Task LoadDatas()
    {
        errorMessage = string.Empty;
        try
        {
            forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
